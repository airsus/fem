head	1.5;
access;
symbols;
locks
	ndd:1.5; strict;
comment	@ * @;


1.5
date	2018.07.18.17.59.28;	author ndd;	state Exp;
branches;
next	1.4;

1.4
date	2018.06.06.16.08.29;	author ndd;	state Exp;
branches;
next	1.3;

1.3
date	2018.05.02.19.03.52;	author ndd;	state Exp;
branches;
next	1.2;

1.2
date	2018.05.01.18.08.51;	author ndd;	state Exp;
branches;
next	1.1;

1.1
date	2018.05.01.17.30.59;	author ndd;	state Exp;
branches;
next	;


desc
@routine to write out the dyna mat file
@


1.5
log
@added verbose argument
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "field.h"

dynaWrite(char *outFileName, double *intensity, struct FieldParams params, int numNodes, int xdcGetSize, int verbose)
{
int i;
FILE *outptr;

	if (verbose == 1) fprintf(stderr, "output file %s\n", outFileName);

/* open output file */

    if ((outptr = fopen(outFileName, "wb")) == NULL) {
		fprintf(stderr, "dynaWrite: couldn't open output file %s\n", outFileName);
		return(-1);
		}

	if (fwrite(&numNodes, sizeof(int), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write numNodes\n");
		return(-1);
		}

	if (fwrite(intensity, sizeof(double), numNodes, outptr) != numNodes) {
		fprintf(stderr, "dynaWrite: failed to write intensity\n");
		return(-1);
		}

	if (fwrite(&params.threads, sizeof(int), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write threads\n");
		return(-1);
		}

	if (fwrite(&params.soundSpeed, sizeof(int), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write soundSpeed\n");
		return(-1);
		}

	if (fwrite(&params.samplingFrequency, sizeof(int), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write samplingFrequency\n");
		return(-1);
		}

	if (fwrite(&params.alpha, sizeof(double), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write alpha\n");
		return(-1);
		}

	if (fwrite(&params.fnum, sizeof(double), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write fnum\n");
		return(-1);
		}

	if (fwrite(&params.focus, sizeof(point_type), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write focus\n");
		return(-1);
		}

	if (fwrite(&params.frequency, sizeof(double), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write frequency\n");
		return(-1);
		}

/* not saving null character for transducer or impulse */

	i = strlen(params.transducer);

	if (fwrite(&i, sizeof(int), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write length of transducer string\n");
		return(-1);
		}

	if (fwrite(params.transducer, sizeof(char), i, outptr) != i) {
		fprintf(stderr, "dynaWrite: failed to write transducer\n");
		return(-1);
		}

	i = strlen(params.impulse);

	if (fwrite(&i, sizeof(int), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write length of impulse string\n");
		return(-1);
		}

	if (fwrite(params.impulse, i, 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write impulse\n");
		return(-1);
		}

	if (fwrite(params.pointsAndNodes, sizeof(struct nodeEntry), numNodes, outptr) != numNodes) {
		fprintf(stderr, "dynaWrite: failed to write points and nodes\n");
		return(-1);
		}

	if (fwrite(&xdcGetSize, sizeof(int), 1, outptr) != 1) {
		fprintf(stderr, "dynaWrite: failed to write size of xdc_get\n");
		return(-1);
		}

/*
*/
	if (fwrite(params.ThData, sizeof(double), xdcGetSize, outptr) != xdcGetSize) {
		fprintf(stderr, "dynaWrite: failed to write ThData\n");
		return(-1);
		}

	fclose(outptr);

	return(1);
}
@


1.4
log
@changed to return error code instead of exiting
@
text
@d6 1
a6 1
dynaWrite(char *outFileName, double *intensity, struct FieldParams params, int numNodes, int xdcGetSize)
d11 1
a11 1
fprintf(stderr, "output file %s\n", outFileName);
@


1.3
log
@changed to not write null at end of string.
@
text
@d16 2
a17 2
		fprintf(stderr, "couldn't open output file %s\n", outFileName);
		exit(EXIT_FAILURE);
d21 2
a22 2
		fprintf(stderr, "failed to write numNodes\n");
		exit(EXIT_FAILURE);
d26 2
a27 2
		fprintf(stderr, "failed to write intensity\n");
		exit(EXIT_FAILURE);
d31 2
a32 2
		fprintf(stderr, "failed to write threads\n");
		exit(EXIT_FAILURE);
d36 2
a37 2
		fprintf(stderr, "failed to write soundSpeed\n");
		exit(EXIT_FAILURE);
d41 2
a42 2
		fprintf(stderr, "failed to write samplingFrequency\n");
		exit(EXIT_FAILURE);
d46 2
a47 2
		fprintf(stderr, "failed to write alpha\n");
		exit(EXIT_FAILURE);
d51 2
a52 2
		fprintf(stderr, "failed to write fnum\n");
		exit(EXIT_FAILURE);
d56 2
a57 2
		fprintf(stderr, "failed to write focus\n");
		exit(EXIT_FAILURE);
d61 2
a62 2
		fprintf(stderr, "failed to write frequency\n");
		exit(EXIT_FAILURE);
d70 2
a71 2
		fprintf(stderr, "failed to write length of transducer string\n");
		exit(EXIT_FAILURE);
d75 2
a76 2
		fprintf(stderr, "failed to write transducer\n");
		exit(EXIT_FAILURE);
d82 2
a83 2
		fprintf(stderr, "failed to write length of impulse string\n");
		exit(EXIT_FAILURE);
d87 2
a88 2
		fprintf(stderr, "failed to write impulse\n");
		exit(EXIT_FAILURE);
d92 2
a93 2
		fprintf(stderr, "failed to write points and nodes\n");
		exit(EXIT_FAILURE);
d97 2
a98 2
		fprintf(stderr, "failed to write size of xdc_get\n");
		exit(EXIT_FAILURE);
d104 2
a105 2
		fprintf(stderr, "failed to write ThData\n");
		exit(EXIT_FAILURE);
d109 2
@


1.2
log
@changed to match correct output order
@
text
@d65 3
a67 1
	i = strlen(params.transducer) + 1;
d79 1
a79 1
	i = strlen(params.impulse) + 1;
@


1.1
log
@Initial revision
@
text
@d25 5
a41 5
		exit(EXIT_FAILURE);
		}

	if (fwrite(intensity, sizeof(double), numNodes, outptr) != numNodes) {
		fprintf(stderr, "failed to write intensity\n");
@
