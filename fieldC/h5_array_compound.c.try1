/*
 * This example shows how to create a compound data type with an array member,
 * and write an array which has the compound data type to the file.
 */

#include <stdio.h>
#include <stdlib.h>
#include <hdf5.h>
#include "field.h"

#define FILE          "dyna.mat"
#define DATASETNAME   "FIELD_PARAMS"
#define LENGTH        10
#define RANK          1
#define ARRAY_RANK    1
#define ARRAY_DIM     3 

int
main(void)
{
int i, numNodes;
/*
double alpha, fnum, freq;
char *transducer, *impulse;
int threads, int lowNslow;
*/
point_type focus;
char *nodeName;
char *elemName;
int lowNslow;
int forceNonLinear;
hsize_t dim = 1;

struct nodeEntry *pointsAndNodes, *readMpn();
struct FieldParams fieldParams;

hid_t      file, dataset, space; /* Handles */
hid_t      array_tid; /* Array datatype handle */
hid_t      s1_tid;     /* File datatype identifier */
herr_t     status;

#if 0
    /* First structure  and dataset*/
    typedef struct s1_t {
	int    a;
	float  b[ARRAY_DIM];
    } s1_t;
    s1_t       s1[LENGTH];

    hsize_t    dim[] = {LENGTH};   /* Dataspace dimensions */
    hsize_t    array_dim[] = {ARRAY_DIM};   /* Array dimensions */

    int        i, j;

    /*
     * Initialize the data
     */
    for (i = 0; i< LENGTH; i++) {
        s1[i].a = i;
        for (j = 0; j < ARRAY_DIM; j++) {
             s1[i].b[j] = i+j;
        }
    }
#endif

	nodeName = "./myNodes.dyn";
	fieldParams.alpha = 0.5;
	fieldParams.fnum = 1.3;

	focus.x = 0;
	focus.y = 0;
	focus.z = 0.02;
	fieldParams.focus = focus;

	fieldParams.frequency = 7.2;
	fieldParams.transducer = "vf105";
	fieldParams.impulse = "gaussian";
	fieldParams.soundSpeed = 1540;
	fieldParams.samplingFrequency = 100e6;
	fieldParams.threads = 1;

	lowNslow = 0;
	elemName = "../tests/elems.dyn";
	forceNonLinear = 0;

	fieldParams.pointsAndNodes = readMpn(nodeName, &numNodes);

	if (fieldParams.pointsAndNodes == NULL) {
		fprintf(stderr, "didn't get enough values from readMpn\n");
		exit(0);
		}

	fprintf(stderr, "after readMpn; numNodes %d\n", numNodes);
	fprintf(stderr, "%f, %f, %f\n", fieldParams.pointsAndNodes[0].x, fieldParams.pointsAndNodes[0].y, fieldParams.pointsAndNodes[0].z);


    /*
     * Create the data space.
     */
    space = H5Screate_simple(RANK, &dim, NULL);

    /*
     * Create the file.
     */
    file = H5Fcreate(FILE, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);

    /*
     * Create the array data type. 
     */
     array_tid = H5Tarray_create(H5T_NATIVE_DOUBLE, ARRAY_RANK, (const hsize_t *)&numNodes);

    /*
     * Create the memory data type. 
     */
    s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(fieldParams));
    H5Tinsert(s1_tid, "a_name", HOFFSET(struct FieldParams, alpha), H5T_NATIVE_DOUBLE);
    H5Tinsert(s1_tid, "b_name", HOFFSET(struct FieldParams, pointsAndNodes), array_tid);

    /* 
     * Create the dataset.
     */
    dataset = H5Dcreate(file, DATASETNAME, s1_tid, space, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

    /*
     * Wtite data to the dataset; 
     */
    status = H5Dwrite(dataset, s1_tid, H5S_ALL, H5S_ALL, H5P_DEFAULT, &fieldParams);

    /*
     * Release resources
     */
    H5Tclose(s1_tid);
    H5Tclose(array_tid);
    H5Sclose(space);
    H5Dclose(dataset);
    H5Fclose(file);
 
#if 0
#endif

    return 0;
}
